# Generated by Django 5.1.1 on 2024-09-23 12:42

from django.db import migrations
import pandas as pd
from pathlib import Path


def forwards_func(apps, schema_editor):
    # declaring data directory
    data_dir = Path(__file__).parent.parent.parent / "data"
    # declaring models
    Store = apps.get_model("app", "Store")
    StoreHours = apps.get_model("app", "StoreHours")
    StoreStatus = apps.get_model("app", "StoreStatus")
    # reading data
    store_status_data = pd.read_csv(data_dir / "store_status.csv")
    store_timezone_data = pd.read_csv(data_dir / "store_timezones.csv")
    store_hours_data = pd.read_csv(data_dir / "store_hours.csv")
    # gathering all the store ids
    store_ids = (
        set(store_status_data["store_id"].unique())
        | set(store_hours_data["store_id"].unique())
        | set(store_timezone_data["store_id"].unique())
    )
    batch_size = 5000
    store_data = dict()
    # creating store objects
    for store_id in store_ids:
        store_data[store_id] = Store(store_id=store_id)
    for row in store_timezone_data.itertuples():
        store_data[row.store_id].timezone = row.timezone_str
    Store.objects.bulk_create(store_data.values())
    print("Store records created")

    store_hours = dict()
    # creating store hours objects
    for store_id in store_ids:
        store_hours[store_id] = [
            StoreHours(store=store_data[store_id], day_of_week=day)
            for day in range(7)  # 7 days in a week
        ]
    for row in store_hours_data.itertuples():
        # setting the start and end time for the store if day is given
        store_hours[row.store_id][row.day].start_time_local = row.start_time_local
        store_hours[row.store_id][row.day].end_time_local = row.end_time_local
    store_hour_objects = []
    # bulk creating store hours objects
    for hours in store_hours.values():
        store_hour_objects.extend(hours)
        if len(store_hour_objects) >= batch_size:
            StoreHours.objects.bulk_create(store_hour_objects)
            store_hour_objects = []
    if store_hour_objects:
        StoreHours.objects.bulk_create(store_hour_objects)
    print("StoreHours records created")
    # creating store status objects
    store_status = [
        StoreStatus(
            store=store_data[row.store_id],
            status=row.status,
            timestamp_utc=row.timestamp_utc.replace("UTC", "Z"),
        )
        for row in store_status_data.itertuples()
    ]
    store_status_objects = []
    # bulk creating store status objects
    for status in store_status:
        store_status_objects.append(status)
        if len(store_status_objects) >= batch_size:
            StoreStatus.objects.bulk_create(store_status_objects)
            store_status_objects = []
    if store_status_objects:
        StoreStatus.objects.bulk_create(store_status_objects)
    print("StoreStatus records created")
    print("Data loaded")


def reverse_func(apps, schema_editor):
    # declaring models
    Store = apps.get_model("app", "Store")
    StoreHours = apps.get_model("app", "StoreHours")
    StoreStatus = apps.get_model("app", "StoreStatus")
    # delete all objects
    Store.objects.all().delete()
    StoreHours.objects.all().delete()
    StoreStatus.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
